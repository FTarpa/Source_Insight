macro ShowMacro(){	//_TempHeadF12(hbuf)    hwnd = GetCurrentWnd()    hbuf = GetCurrentBuf()	if (hwnd == 0)	{    	hbuf = OpenDefaultSR(hbuf)    	stop	}		//mk内 未选择	fName = GetFileName(GetBufName(hbuf))	if (IsFileType(fName, ".mk")) //IsMakeFile(hbuf)	{		//显示配置		ShowCfg(hbuf)	}	else if (IsSRFile(hbuf))	{		//打开选中/默认mk		ret = OpenSelMakeFile(hbuf)		if(ret == "")			OpenDefaultMake(hbuf)	}	else if (IsFileName(hbuf, "Simple_CTRL_K.h"))	{		ShowMyHelp(hbuf)	}	else	{		key = GetKey()		if (key >= 1048688 && key <= 1048699 )      // F1~F12  显示f1~f12 功能说明(SI4.0编码)		{			TreeFNum(hbuf, key-1048687)		}	}}macro ShowCfg(hbuf){	//_TempHeadF12(hbuf)	var note	var tmp	note = ""		szpathName = GetBufName(hbuf)	filename = GetFileName(szpathName)		//获取当前工程分类，区分处理	n = 10		// n == 10: 6531DA	// n == 20: 6531btdialer	// n == 30: 6531E	// n == 40: soft	// n == 50: 6533	startStr = strtrunc (filename,strlen("project_"))	if(startStr == "project_")	{		n = getBaseType(szpathName)	}		var searchFor	searchFor ="MMI_MULTI_SIM_SYS"	note = note # getMacroCfg(hbuf, searchFor, "DUAL", "双卡", "单卡")	searchFor ="__SBD_RF_TWO_BAND_SUPPORT__"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "二频,", "四频,")	if(n == 30){//6531E		searchFor ="SBD_REMOVE_VIBRA"	}else{		searchFor ="__HHT_REMOVE_VIBRA__"	}	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "不带马达,", "马达,")	searchFor ="SBD_DUAL_CAMERA_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "双摄像头,", "单摄像头,")		if(n == 30){//6531E		searchFor ="SBD_FM_OPEN_SPEAK_OPEN_SUPPORT"	}else{		searchFor ="MMI_FM_OPEN_SPEAK_OPEN_SUPPORT"	}	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "FM外放,", "FM内置,")	if(n == 30){//6531E		searchFor ="SBD_EXT_AMPLIFIER_CLASS_K_SUPPORT"	}else{		searchFor ="__HHT_EXT_AMPLIFIER_CLASS_K__"	}	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "外置K类,", "")		if(n == 10){//6531DA		searchFor ="__HHT_EARPIECE_SPEAK_USE_ONE__"	}else{		searchFor ="SBD_EARPIECE_SPEAK_USE_ONE"	}	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "软件2合1,", "硬件2合1,")		searchFor ="VIRTUAL_VIBRATE_FUNC"	if("TRUE" == getMacroCfg(hbuf, searchFor, "TRUE", "TRUE", "")){		searchFor ="CUS_ADD_SHAKE"		if("TRUE" == getMacroCfg(hbuf, searchFor, "TRUE", "TRUE", "")){			note = note # "三合一," # CharFromKey(13)		}else{			note = note # "三合一(X)," # CharFromKey(13)		}	}		if(n == 30){//6531E		searchFor ="SBD_ADD_TORCHLIGHT"		if("TRUE" == getMacroCfg(hbuf, searchFor, "TRUE", "TRUE", "")){			searchFor ="SBD_TORCHLIGHT_USE_FLASHLIGHT_PIN"			note = note # "手电筒" # getMacroCfg(hbuf, searchFor, "TRUE", "<-闪", "")			searchFor ="SBD_FLASHLIGHT_USE_TORCHLIGHT_PIN"			note = note # getMacroCfg(hbuf, searchFor, "TRUE", "<-闪,", ",")		}	}else{		searchFor ="HHT_ADD_TORCHLIGHT"		if("TRUE" == getMacroCfg(hbuf, searchFor, "TRUE", "TRUE", "")){			searchFor ="HHT_TORCHLIGHT_USE_FLASHLIGHT"			note = note # "手电筒" # getMacroCfg(hbuf, searchFor, "TRUE", "<-闪,", ",")		}	}	searchFor ="DC_FLASH_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "闪光灯,", "")	searchFor ="SBD_ADD_CHECKINGLAMP"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "验钞灯,", "")	searchFor ="UMEM_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "U盘,", "") # CharFromKey(13)	note = note # "语言:" # getNoteLang(hbuf, "^IM_.*TRUE")		searchFor ="IM_ENGINE"	note = note # "输入法:" # getMacroCfg(hbuf, searchFor, "CSTAR", "CSTAR,", "NONE,")	searchFor ="FONT_TYPE_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "VECTOR", "VECTOR/", "")	searchFor ="FONT_TYPE_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "DE_BITMAP", "DE/", "")	searchFor ="FONT_TYPE_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "NONE", "NONE/", "")		searchFor ="REVERIE_INPUT_METHOD_SUPPORT"	if("TRUE" == getMacroCfg(hbuf, searchFor, "TRUE", "TRUE", "FALSE")){		searchFor ="FONT_TYPE_SUPPORT"		note = note # getMacroCfg(hbuf, searchFor, "REVERIE_BITMAP", "REV22/", "--22/")	}else{		searchFor ="FONT_TYPE_SUPPORT"		note = note # getMacroCfg(hbuf, searchFor, "REVERIE_BITMAP", "REV--/", "")	}		searchFor ="VECTOR_FONT_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "DEFAULT", "DEFAULT/", "")	searchFor ="VECTOR_FONT_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "ETRUMP", "ETRUMP/", "")	searchFor ="VECTOR_FONT_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "NONE", "NONE/", "")	searchFor ="BITMAP_FONT_SLIM_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "SLIM,", "NONE,") # CharFromKey(13)	searchFor ="MMI_RES_ORIENT"	note = note # getMacroCfg(hbuf, searchFor, "LANDSCAPE", "横屏,", "")		searchFor ="LCD_CHIP_GC9101"	if("TRUE" == getMacroCfg(hbuf, searchFor, "TRUE", "TRUE", "FALSE")){		searchFor ="LCD_CHIP_GC9105"		note = note # getMacroCfg(hbuf, searchFor, "TRUE", "GC9105 err,", "")	}		searchFor ="H264_DEC_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "H264+", "H264-")	searchFor ="AVI_DEC_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "AVI+,", "AVI-,") # CharFromKey(13)		note = note # getMacroCameraCfg(hbuf)	note = note # getMacroLcdCfg(hbuf)		searchFor ="MMI_CHECK_MEMINFO_SUPPORT"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "MEMINFO+,", "") # CharFromKey(13)	//1 正则表达式参考TestChar(0); 2 注意\\; 3 避免查找部分宏; 4 暂时不加[]会与.*冲突	searchFor ="SBD_HEADSET_KEY_CONTROL_MP3\\w"	note = note # getMacroCfg(hbuf, searchFor, "TRUE", "SBD_HEADSET_KEY_CONTROL_MP3 pls del,", "") # CharFromKey(13)	//显示1000条短信NV值	pbNum = getMacroValue(hbuf, "PHONEBOOK_ITEM_NUMBER", 1) //"1000"	if(pbNum == "1000" || pbNum == "500")	{		smsNum = getMacroValue(hbuf, "SMS_ITEM_NUMBER", 1)		nvStr = getMacroValue(hbuf, "NV_PRTITION", 2) //"1000"		pkey = "nv-" # pbNum # "-" # smsNum //nv-1000-500		defKey = "nv-default"		nvNote = GetSetVal(pkey, defKey)				note = note # "pb@pbNum@-sms@smsNum@-" # nvStr # nvNote # CharFromKey(13)	}		msg ("配置:" # "@note@")}macro getMacroCfg(hbuf, searchFor, searchResult, tStr, fStr){	//_TempHeadF12(hbuf)	//SearchInBuf (hbuf, pattern, lnStart, ichStart, fMatchCase, fRegExp, fWholeWordsOnly)	sel = SearchInBuf(hbuf, "^"	# searchFor	# ".*"	# searchResult, 0, 0, 0, 1, 0)	if (sel != "")	{		return tStr;	}else	{		return fStr;	}}//语言macro getNoteLang(hbuf, searchFor){	//_TempHeadF12(hbuf)	var lang	var tmp	var error	sel = SearchInBuf(hbuf, searchFor, 0, 0, 0, 1, 0)	if(sel == "")		lang = "[英],"				while (sel != "")	{				cur_line = GetBufLine( hbuf, sel.lnFirst )		cur_sel = strmid(cur_line, sel.ichFirst, sel.ichLim)		cur_word = NextWS(cur_sel, 0)		//IM_VIETNAMESE_SUPPORT				cur_sel = strmid(cur_line, strlen("IM_"), cur_word - strlen("_SUPPORT"))				error = 1;		if (cur_sel == "BASQUE") {tmp = "巴斯克"; error = 0;}		else if (cur_sel == "DANISH") {tmp = "丹麦语"; error = 0;}		else if (cur_sel == "CATALAN") {tmp = "加泰罗尼亚"; error = 0;}		else if (cur_sel == "MACEDONIAN") {tmp = "马其顿"; error = 0;}		else if (cur_sel == "GALICIAN") {tmp = "加利西亚"; error = 0;}		else if (cur_sel == "LAO") {tmp = "老挝"; error = 0;}		else if (cur_sel == "MALAY") {tmp = "马来语"; error = 0;}		else if (cur_sel == "HAUSA") {tmp = "豪萨语"; error = 0;}		else if (cur_sel == "TAGALOG") {tmp = "他加禄语"; error = 0;}		else if (cur_sel == "KANNADA") {tmp = "卡纳达语"; error = 0;}		else if (cur_sel == "IGBO") {tmp = "伊博"; error = 0;}		else if (cur_sel == "MALAYALAM") {tmp = "马拉雅拉姆"; error = 0;}		else if (cur_sel == "THAI") {tmp = "泰语"; error = 0;}		else if (cur_sel == "TAMIL") {tmp = "泰米尔"; error = 0;}		else if (cur_sel == "MARATHI") {tmp = "马拉"; error = 0;}		else if (cur_sel == "LATVIAN") {tmp = "拉脱维亚"; error = 0;}		else if (cur_sel == "KAZAKH") {tmp = "哈萨克"; error = 0;}		else if (cur_sel == "HEBREW") {tmp = "希伯来语"; error = 0;}		else if (cur_sel == "ICELANDIC") {tmp = "冰岛"; error = 0;}		else if (cur_sel == "BENGALI") {tmp = "孟加拉"; error = 0;}		else if (cur_sel == "GERMAN") {tmp = "德国"; error = 0;}		else if (cur_sel == "KHMER") {tmp = "高棉"; error = 0;}		else if (cur_sel == "HINDI") {tmp = "印地语"; error = 0;}		else if (cur_sel == "TELUGU") {tmp = "泰卢固语"; error = 0;}		else if (cur_sel == "GEORGIAN") {tmp = "格鲁吉亚"; error = 0;}		else if (cur_sel == "URDU") {tmp = "乌尔都语"; error = 0;}		else if (cur_sel == "PERSIAN") {tmp = "波斯"; error = 0;}		else if (cur_sel == "AFRIKAANS") {tmp = "南非荷兰语"; error = 0;}		else if (cur_sel == "SERBIAN") {tmp = "塞尔维亚"; error = 0;}		else if (cur_sel == "XHOSA") {tmp = "科萨"; error = 0;}		else if (cur_sel == "SESOTHO") {tmp = "莱索托"; error = 0;}		else if (cur_sel == "TIBETAN") {tmp = "西藏"; error = 0;}		else if (cur_sel == "FINNISH") {tmp = "芬兰"; error = 0;}		else if (cur_sel == "GREEK") {tmp = "希腊"; error = 0;}		else if (cur_sel == "FILIPINO") {tmp = "菲律宾"; error = 0;}		else if (cur_sel == "IRISH") {tmp = "爱尔兰"; error = 0;}		else if (cur_sel == "ZULU") {tmp = "祖鲁"; error = 0;}		else if (cur_sel == "ORIYA") {tmp = "奥里亚"; error = 0;}		else if (cur_sel == "SLOVAK") {tmp = "斯洛伐克"; error = 0;}		else if (cur_sel == "AMHARIC") {tmp = "阿姆哈拉语"; error = 0;}		else if (cur_sel == "DUTCH") {tmp = "荷兰语"; error = 0;}		else if (cur_sel == "POLISH") {tmp = "波兰"; error = 0;}		else if (cur_sel == "ARABIC") {tmp = "阿拉伯"; error = 0;}		else if (cur_sel == "ALBANIAN") {tmp = "阿尔巴尼亚"; error = 0;}		else if (cur_sel == "FRENCH") {tmp = "法语"; error = 0;}		else if (cur_sel == "VIETNAMESE") {tmp = "越南"; error = 0;}		else if (cur_sel == "CZECH") {tmp = "捷克的"; error = 0;}		else if (cur_sel == "SPANISH") {tmp = "西班牙"; error = 0;}		else if (cur_sel == "LITHUANIAN") {tmp = "立陶宛"; error = 0;}		else if (cur_sel == "YORUBA") {tmp = "约鲁巴语"; error = 0;}		else if (cur_sel == "MOLDOVAN") {tmp = "摩尔多瓦"; error = 0;}		else if (cur_sel == "UKRAINIAN") {tmp = "乌克兰"; error = 0;}		else if (cur_sel == "ITALIAN") {tmp = "意大利"; error = 0;}		else if (cur_sel == "SLOVENIAN") {tmp = "斯洛文尼亚"; error = 0;}		else if (cur_sel == "ROMANIAN") {tmp = "罗马尼亚"; error = 0;}		else if (cur_sel == "UYGHUR") {tmp = "维吾尔"; error = 0;}		else if (cur_sel == "ARMENIAN") {tmp = "亚美尼亚"; error = 0;}		else if (cur_sel == "CROATIAN") {tmp = "克罗地亚"; error = 0;}		else if (cur_sel == "INDONESIAN") {tmp = "印尼"; error = 0;}		else if (cur_sel == "ASSAMESE") {tmp = "阿萨姆语"; error = 0;}		else if (cur_sel == "SWAHILI") {tmp = "斯瓦希里语"; error = 0;}		else if (cur_sel == "PUNJABI") {tmp = "旁遮普"; error = 0;}		else if (cur_sel == "NORWEGIAN") {tmp = "挪威"; error = 0;}		else if (cur_sel == "ESTONIAN") {tmp = "爱沙尼亚"; error = 0;}		else if (cur_sel == "SWEDISH") {tmp = "瑞典的"; error = 0;}		else if (cur_sel == "RUSSIAN") {tmp = "俄罗斯"; error = 0;}		else if (cur_sel == "MYANMAR") {tmp = "缅甸"; error = 0;}		else if (cur_sel == "TURKISH") {tmp = "土耳其的"; error = 0;}		else if (cur_sel == "GUJARATI") {tmp = "古吉拉特语"; error = 0;}		else if (cur_sel == "PORTUGUESE") {tmp = "葡萄牙"; error = 0;}		else if (cur_sel == "BULGARIAN") {tmp = "保加利亚"; error = 0;}		else if (cur_sel == "HUNGARIAN") {tmp = "匈牙利"; error = 0;}		else if (cur_sel == "AZERBAIJANI") {tmp = "阿塞拜疆"; error = 0;}		else if (cur_sel == "SINHALESE") {tmp = "僧伽罗"; error = 0;}		else if (cur_sel == "SIMP_CHINESE") {tmp = "中文"; error = 0;}		else {tmp = "未知"; error = 0;}		//if (error == 1) 		{tmp = "未知"; error = 0;}				lang = lang # tmp #  ","		sel = SearchInBuf(hbuf, SearchFor, sel.lnLast, sel.ichLim, 0, 1, 0)		//sel = "" # sel.lnFirst # sel.ichFirst # sel.lnLast # sel.ichLim #  ","			//msg ("sel:" # "@sel@")	}	return lang}//判断config是否存在相关配置macro getMacroCameraCfg(hbuf){	//_TempHeadF12(hbuf)	var cameraTxt	var tmp	var error	searchFor = "^SENSOR_CHIP_.*TRUE"	sel = SearchInBuf(hbuf, searchFor, 0, 0, 0, 1, 0)	cam = ""	szpathName = GetBufName(hbuf)	basePro = getBasePath(hbuf)	product_cfg = getMacroValue(hbuf, "PRODUCT_CONFIG", 1)	cfgFile = basePro # "\\MS_Customize\\source\\product\\config\\" # product_cfg # "\\sensor_cfg.c"	cfgBuf = OpenCache(cfgFile)	//mtk的mk不存在这个文件	if (cfgBuf == hNil)	{		return "" 	}		while (sel != "")	{		cur_line = GetBufLine(hbuf, sel.lnFirst )		mar = GetLineMacro(cur_line)		val = GetLineValue(cur_line)				cfgSel = SearchInBuf(cfgBuf, mar, 0, 0, 0, 1, 0)		if (cfgSel == "")		{			cameraTxt = cameraTxt # strmid(mar,strlen("SENSOR_CHIP_"),strlen(mar)) #  " not add (sensor_cfg.c)," # CharFromKey(13)		}				sel = SearchInBuf(hbuf, SearchFor, sel.lnLast, sel.ichLim, 0, 1, 0)	}	return cameraTxt}//判断config是否存在相关配置macro getMacroLcdCfg(hbuf){	//_TempHeadF12(hbuf)	var lcdTxt	var tmp	var error	searchFor = "^LCD_CHIP_.*TRUE"	sel = SearchInBuf(hbuf, searchFor, 0, 0, 0, 1, 0)	cam = ""	szpathName = GetBufName(hbuf)	basePro = getBasePath(hbuf)	product_cfg = getMacroValue(hbuf, "PRODUCT_CONFIG", 1)	cfgFile = basePro # "\\MS_Customize\\source\\product\\config\\" # product_cfg # "\\lcm_cfg_info.c"	cfgBuf = OpenCache(cfgFile)	//mtk的mk不存在这个文件	if (cfgBuf == hNil)	{		return "" 	}		while (sel != "")	{		cur_line = GetBufLine(hbuf, sel.lnFirst )		mar = GetLineMacro(cur_line)		val = GetLineValue(cur_line)				cfgSel = SearchInBuf(cfgBuf, mar, 0, 0, 0, 1, 0)		if (cfgSel == "")		{			lcdTxt = lcdTxt # strmid(mar,strlen("LCD_CHIP_"),strlen(mar)) #  " not add (lcm_cfg_info.c)," # CharFromKey(13)		}				sel = SearchInBuf(hbuf, SearchFor, sel.lnLast, sel.ichLim, 0, 1, 0)	}	return lcdTxt}//获取宏对应值, 多次查找用","分隔//count = 查找次数macro getMacroValue(hbuf, pKey, count){	//_TempHeadF12(hbuf)	searchFor = "^" # pKey //PRODUCT_CONFIG	//SearchInBuf (hbuf, pattern, lnStart, ichStart, fMatchCase, fRegExp, fWholeWordsOnly)	sel = SearchInBuf(hbuf, searchFor, 0, 0, 0, 1, 0)	val = ""	valArr = ""	while (sel != "")	{		cur_line = GetBufLine(hbuf, sel.lnFirst )		//mar = GetLineMacro(cur_line)		val = GetLineValue(cur_line)		if(val == "TRUE")		{			mcr = GetLineMacro(cur_line)			if(mcr != pKey)			{				val = strmid(mcr, strlen(pKey)+1, strlen(mcr))			}		}				if(count == 1)		{			return val;		}		else		{			valArr = valArr # val # ","			sel = SearchInBuf(hbuf, searchFor, sel.lnLast+1, 0, 0, 1, 0)		}	}	return valArr;}//get:value->keymacro GetSetVal(key, defKey){	//val:nv-1000-500,allnv-279-8.7+1-TINY_EXE	mFile = getSetPath(0) # "\\Macro_Val.h"	mBuf = OpenCache(mFile)	mKey = "val:" # key # ","	mSel = SearchInBuf(mBuf, mKey, 0, 0, FALSE, FALSE, FALSE)	if (mSel == "")	{		mKey = "val:" # defKey # ","		mSel = SearchInBuf(mBuf, mKey, 0, 0, FALSE, FALSE, FALSE)	}		val = ""	if (mSel != "")	{		line = GetBufLine(mBuf, mSel.lnFirst )		val  = strmid(line, strlen(mKey), strlen(line))	}	CloseBuf(mBuf)	return val}/***********************************************************************//*************************** Show Macro ********************************//***********************************************************************/macro ShowWholeMacro(hbuf){	ret = 0	cur_sel = ""	if(1)	{		sel = MGetWndSel(hbuf)		if (IsSingleSelect(sel))		{			cur_line = GetBufLine(hbuf, sel.lnFirst )			if(strlen(cur_line) < sel.ichLim)				sel.ichLim = sel.ichLim - 1			if(sel.ichFirst == sel.ichLim || 4095 == sel.ichLim)				stop			cur_sel = strmid(cur_line, sel.ichFirst, sel.ichLim)		}	}	if(cur_sel != "")	{		if (IsFileName(hbuf, "MMI_features"))		{			//显示宏名称是否定义(MTK)			ShowMarcoFromFile(hbuf, cur_sel)			return 1;		}				//显示Lang help		if(ReadIntMode(getPyInfo(0))>0)		{			if(ShowNoteHelp(cur_sel, "Macro_Info_Python.h"))				return 1;		}		if(ReadIntMode(getAndroidInfo(0))>0)		{			LibName = "Macro_Info_Android_Lib.h"			if(IsFileName(hbuf, LibName))			{				SearchForward()				return 1;			}			else if(FindString(cur_sel, ".")!="X" || FindString(cur_sel, ":")!="X")			{				if(ShowLibHelp(cur_sel, "Macro_Info_Android_Lib.h", isLib))					return 1;			}			else			{				if(ShowNoteHelp(cur_sel, "Macro_Info_Android.h"))					return 1;				else if(ShowLibHelp(":" # cur_sel, "Macro_Info_Android_Lib.h", isLib))					return 1;			}		}		//显示图片路径(SPR)		if(GetImageMacro(cur_sel)){			return 1;		}		//显示宏名称是否定义(MTK)		if(ShowMarcoFromFile(hbuf, cur_sel)){			return 1;		}	}	return ret;}macro ShowNoteHelp(cur_sel, fileName){	ret = 0	if(cur_sel != "")	{//		msg("@cur_sel@")		mFile = getLangInfoPath(0) # "\\" # fileName		hbufSet = OpenCache(mFile)		//搜"str::"开头的信息		ret = ShowMoreHelp(hbufSet, "::", cur_sel)		if(ret)		{			//goto file			msg ("open Set Note Python/Android?" )			if (hbufSet != hNil){				setCurrentBuf(hbufSet)				ret = GotoNextMacroEx(hbufSet, cur_sel # "::", 0, 0)			}		}	}	return ret;	}macro ShowLibHelp(cur_sel, fileName, isLib){	ret = 0	if(cur_sel != "")	{//		msg("@cur_sel@")		mFile = getLangInfoPath(0) # "\\" # fileName		hbufSet = OpenCache(mFile)				//搜"str"开头的信息		key = cur_sel # ""		mSelStart = SearchInBuf(hbufSet, key, 0, 0, FALSE, FALSE, FALSE)		if (mSelStart != "")		{			setCurrentBuf(hbufSet)			ret = GotoNextMacroEx(hbufSet, cur_sel # "", 0, 0)			return 1;		}	}	return ret;	}macro GetImageMacro(key){	ret = 0	//_TempHeadF12(hbuf)	mFile = getSetPath(0) # "\\Show_Pic_dir.h"	if(IsExistFile(mFile))	{		mBuf = OpenCache(mFile)		mKey = "pic:" # key # ","		mSel = SearchInBuf(mBuf, mKey, 0, 0, FALSE, FALSE, FALSE)		nTxt = ""		while (mSel != "")		{			line = GetBufLine(mBuf, mSel.lnFirst )			ilen = strlen(line)						ich = SplitMacro(line, ",", 0, ilen)					nTxt   = nTxt # strmid(line, ich + 1, ilen) # CharFromKey(13)						mSel = SearchInBuf(mBuf, mKey, mSel.lnLast+1, 0, 0, 0, 0)		}		CloseBuf(mBuf)		if(nTxt != ""){			msg("path:" # CharFromKey(13) # nTxt)			return 1;		}	}	return ret}macro SearchFromFile(fileName, mar){	//msg(fileName # ";" # mar # ";")	mBuf = OpenCache(fileName)	mSel = SearchInBuf(mBuf, mar, 0, 0, FALSE, FALSE, FALSE)	nTxt = ""	while (mSel != "")	{		line = GetBufLine(mBuf, mSel.lnFirst )		nTxt = nTxt # line # CharFromKey(13)				mSel = SearchInBuf(mBuf, mar, mSel.lnLast+1, 0, 0, 0, 0)	}	CloseBuf(mBuf)	return nTxt}macro SearchFromFileSpr(fileName, mar){	//msg(fileName # ";" # mar # ";")	mBuf = OpenCache(fileName)	mSel = SearchInBuf(mBuf, mar, 0, 0, FALSE, FALSE, FALSE)	nTxt = ""	nS = 0	while (mSel != "")	{		if(nS < 30)		{			line = GetBufLine(mBuf, mSel.lnFirst )			//word = strmid(line, mSel.ichFirst, mSel.ichLim)			word = GetWholeMacro(line, mSel)			index = FindString( word, mar )			if(index != "X")			{				mSel.ichLim = mSel.ichFirst + strlen(word) - strlen(mar) 			}			nTxt = nTxt # word # CharFromKey(13)		}				mSel = SearchInBuf(mBuf, mar, mSel.lnLast, mSel.ichLim, 0, 0, 0)		nS = nS + 1	}	CloseBuf(mBuf)	if(nS >= 30)		nTxt = nTxt # "..." # CharFromKey(13) # "count: @nS@" # CharFromKey(13)	return nTxt}macro ShowMarcoFromFile(hbuf, mar){	ret = 0	szpathName = GetBufName(hbuf)	filename = GetFileName(szpathName)		//获取当前工程分类，区分处理	n = getBaseType(szpathName)	if(n == 80)	{		hprj = GetCurrentProj ()		if(hprj>0)		{			path = GetProjDir (hprj)			n = getBaseType(path)		}	}	if(n == 10 || n == 20 || n == 30 || n == 60)	{		ShowMarcoFromSprFile(hbuf, mar)		return 1;	}	else if(n == 70)	{		ShowMarcoFromMtkFile(hbuf, mar)		return 1;	}	return ret;}macro ShowMarcoFromSprFile(hbuf, mar){	baseDir = getBasePath(hbuf)	//baseDir = "F:\\6531E_16A"	setProPath = ReadMode(getNoteHanderSet(0))	//setProPath = "SE0397_CY_L1828_ECHO_2IN1_TE_F5"	proName = setProPath		//msg(baseDir # "\\" # proName # ";")	ret = "项目: @proName@" # CharFromKey(13)	ret = ret # "宏定义文件与内容:" # CharFromKey(13)	ret = ret # "    app.macro:" # CharFromKey(13)	fileName = baseDir # "\\build\\" # proName # "_builddir\\tmp\\app.macro"	sch = SearchFromFileSpr(fileName, mar)	if(sch == "")		sch = "not found"	ret = ret # sch # CharFromKey(13)	msg(ret)	msg("添加到 Clipboard")	SetClipString(ret)}macro ShowMarcoFromMtkFile(hbuf, mar){	baseDir = getBasePath(hbuf)	//baseDir = "F:\6531E_16A"	setProPath = ReadMode(getNoteHanderSet(0))	len = strlen(setProPath)	//下一个空格	next = NextWS(setProPath, 0)	if (next == "X")	{		proName = setProPath	}	else	{		proName = strmid(setProPath, 0, next)	}	re = IsExistFile(baseDir # "\\build\\" # proName # "\\MMI_DRV_DEFS.mak")	if(!re)	{		setProPath = ReadMode(getNoteHanderBak(0))		len = strlen(setProPath)		//下一个空格		next = NextWS(setProPath, 0)		if (next == "X")		{			proName = setProPath		}		else		{			proName = strmid(setProPath, 0, next)		}	}		//msg(baseDir # "\\" # proName # ";")	ret = "项目: @proName@" # CharFromKey(13)	ret = ret # "宏定义文件与内容:" # CharFromKey(13)	ret = ret # "    Mar-drv:" # CharFromKey(13)	fileName = baseDir # "\\build\\" # proName # "\\MMI_DRV_DEFS.mak"	ret = ret # SearchFromFile(fileName, mar) # CharFromKey(13)		ret = ret # "    Mar-info:" # CharFromKey(13)	fileName = baseDir # "\\build\\" # proName # "\\log\\info.log"	ret = ret # SearchFromFile(fileName, mar) # CharFromKey(13)		ret = ret # "    Mar-features-opt:" # CharFromKey(13)	fileName = baseDir # "\\build\\" # proName # "\\log\\drv_features_option.log"	ret = ret # SearchFromFile(fileName, mar) # CharFromKey(13)		ret = ret # "    Mar-features:" # CharFromKey(13)	fileName = baseDir # "\\build\\" # proName # "\\log\\MMI_features.log"	ret = ret # SearchFromFile(fileName, mar) # CharFromKey(13)	msg(ret)	msg("添加到 Clipboard")	SetClipString(ret)}macro OpenF12Test(hbuf, v){	//_TempHeadF12(hbuf)}