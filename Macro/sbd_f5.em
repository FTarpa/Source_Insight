macro Goto(){	//_TempHeadF5(hbuf)	hbuf = GetCurrentBuf()		//日志功能	if(IsFileName(hbuf, "Macro_Rule_")){	}	else if(IsNoteFile(hbuf))	{		NoteHander(hbuf, 5, 0)		stop	}		//F7开关：切换F5、F6功能	ret = SwtichTools("F5")//switch mode -> other work	if(ret == 0)		stop			StartGoto(hbuf)}macro StartGoto(hbuf){	sel = MGetWndSel(hbuf)	//未选择	if (IsNoSelect(sel))	{		if(IsMakeFile(hbuf))		{			//跳转到复制对应的语言/宏			cur_line = GetClipString(hbuf)			if(strlen(cur_line) > 0)			{				GotoHan(cur_line)			}			else			{				msg = "跳转: " # CharFromKey(13)				msg = msg # "1.跳转到复制对应的语言/宏"            # CharFromKey(13)				msg = msg # "2.跳转到选中的宏"        # CharFromKey(13)				msg (msg)			}		}		else		{			//1.寻找当前节点，格式：[xxx]			//2.寻找当前节点，格式：// xxx abcd...			GotoNode (hbuf)		}	}	else	{		cur_line = GetBufLine(hbuf, sel.lnFirst )		if(strlen(cur_line) < sel.ichLim)			sel.ichLim = sel.ichLim - 1		if(sel.ichFirst == sel.ichLim || 4095 == sel.ichLim)			stop		cur_sel = strmid(cur_line, sel.ichFirst, sel.ichLim)				if(IsMakeFile(hbuf)||IsSRFile(hbuf))		{			// bft == 10: 6531DA			// bft == 20: 6531btdialer			// bft == 30: 6531E			// bft == 40: soft			// bft == 50: 6533			bft = getBufBft(hbuf, 4)			//	if(bft == "")			//		stop						//选中宏，mk文件中,          打开/跳转到对应的文件/宏			GotoKey(hbuf, bft, cur_sel)		}		else if(IsFileName(hbuf, "MMI_features_switch"))		{			//跳转到文件或路径,再跳转到word/mcr			GotoFile("file", "MMI_features.h", "", cur_sel)		}		else		{			//选中宏，非mk文件中, 查找下一个			SearchForward()			//GotoNextMacro(cur_sel, sel.lnFirst, sel.ichFirst+1)		}	}}macro GotoKey(hbuf, bft, word){	//find key, even row	//_TempHeadF5(hbuf)		hbufRule = OpenCache(getRulePath(0) # "\\Macro_Rule_Key_file_@bft@.h")	len = strlen (word)	left = 0	right = 0	start = 0	while (start>=0)	{		right = SplitMacro(word, "_", left, len) //chg:left->start//		msg(start # " " # left # " " # right)		if (right == -1)		{			mcr = strmid(word, start, len);			start = SplitMacro(word, "_", start, len) + 1			left = start			if(start == 0)				start = -1		}		else if (right >= left)		{			mcr = strmid(word, start, right);			left = right + 1		}		else		{			break		}				row = FindCacheWholeFile(hbufRule, "key:" # mcr # ",")//		msg("key:" # mcr # ", " # row)		if(row >= 0)		{			//NV3209G,file:tft_NV3209G.c			cur_line = GetBufLine(hbufRule, row )			cur_len = strlen (cur_line)			lnStr = GetLineMacro(cur_line)	//获取宏，不包括删除注释			index2 = SplitMacro(cur_line, ",", 0, cur_len)			index3 = SplitMacro(cur_line, ":", index2, cur_len)						cmdType = strmid(cur_line, index2+1, index3);			fileName = strmid(cur_line, index3+1, cur_len);						GotoFile(cmdType, fileName, mcr, word)			break		}	}		CloseBuf(hbufRule)}macro GotoHan(word){	//find Han, even row	//不同电脑可能有差异，在Macro_Rule_Han.h中用F6排序(多按2次不影响)	//_TempHeadF5(hbuf)	hbufRule = OpenCache(getRulePath(0) # "\\Macro_Rule_Han_file.h")	lnMax = GetBufLineCount(hbufRule)	//查找Rule	row = FindCacheWholeFile(hbufRule, "key:" # word)	if(row >= 0)	{		cur_line = GetBufLine(hbufRule, row )				index = NextWS( cur_line, 0)		len = strlen(cur_line)		mar = strmid(cur_line, index+1, len)		//msg ("mar:  ~ @mar@" )			GotoNextMacro(mar, 0, 0)	}	else	{		msg ("@word@ not found" )	}}macro GotoFile(type, fileName, mcr, word){	//跳转到文件或路径,再跳转到word/mcr	//_TempHeadF5(hbuf)//	msg ("GotoFile:  ~ @type@ ~ @fileName@ ~ @mcr@ ~ @word@" )	if ("file" == "@type@")	{		word2 = ""		{			hbuf = GetCurrentBuf()			product_cfg = getMacroValue(hbuf, "PRODUCT_CONFIG", 1)						//basePro = getBasePath(hbuf)			//fileName = cat(basePro, "\\@fileName@")			fileNameRe = ReplaceWord(fileName, "{CONFIG}", "@product_cfg@")			if(fileNameRe != fileName)			{				fileName = fileNameRe								sel = MGetWndSel(hbuf)				cur_line = GetBufLine(hbuf, sel.lnFirst )				word2 = GetLineValue(cur_line)			}		}				hbuf = OpenExistFile(fileName)		if (hbuf != hNil){			ret = GotoNextMacroEx(hbuf, word, 0, 0)			//no found			if(ret == 0 && word2 != "")			{				ret = GotoNextMacroEx(hbuf, word2, 0, 0)			}			//no found			if(ret == 0 && mcr != "")			{				ret = GotoNextMacroEx(hbuf, mcr, 0, 0)			}		}		else		{			msg ("@fileName@ no found!" )		}	}	else if ("path" == "@type@")	{		hbuf = GetCurrentBuf()		basePro = getBasePath(hbuf)		curPath = cat(basePro, "\\@fileName@")		product_cfg = getMacroValue(hbuf, "PRODUCT_CONFIG", 1) //"SE039_MB"		curPath = ReplaceWord(curPath, "{CONFIG}", "@product_cfg@")				sel = MGetWndSel(hbuf)		cur_line = GetBufLine(hbuf, sel.lnFirst )		val = GetLineValue(cur_line)		curPath = ReplaceWord(curPath, "{VALUE}", "@val@")		//		msg ("Goto:  ~ @curPath@" )		ret = ShellExecute("explore", "@curPath@", "", "", 1)	}	}macro GotoNextMacro(word, lnStart, ichStart){	//跳转到当前文件宏位置	//_TempHeadF5(hbuf)    hbuf = GetCurrentBuf()    return GotoNextMacroEx(hbuf, word, lnStart, ichStart)}macro GotoNextMacroEx(hbuf, word, lnStart, ichStart){	//err return 0; found return 1	    hwnd = GetCurrentWnd()    	//SearchInBuf (hbuf, pattern, lnStart, ichStart, fMatchCase, fRegExp, fWholeWordsOnly)	sel = SearchInBuf(hbuf, word, lnStart, ichStart, 0, 0, 0)	if (sel != "")	{		ScrollWndToLine(hwnd, sel.lnFirst)		SetWndSel(hwnd, sel)		return 1	}	else if(lnStart != 0 || ichStart != 0)	{		LoadSearchPattern(SearchFor, 0, 0, 0)		sel = SearchInBuf(hbuf, word, 0, 0, 0, 0, 0)		if (sel != "")		{			ScrollWndToLine(hwnd, sel.lnFirst)			SetWndSel(hwnd, sel)			return 1		}		else		{			return 0		}	}	else	{		//msg ("\"@word@\" no found" )		return 0	}}macro GotoNode(hbuf){	//_TempHeadF5(hbuf)		//1.寻找当前节点，格式：[xxx]	sel = MGetWndSel(hbuf)	cur_line = GetBufLine(hbuf, sel.lnFirst )	hwnd = GetCurrentWnd()	start = FindString( cur_line, "[" )	if (start != "X")	{		next = FindString( cur_line, "]" )		if (next != "X" )		{			if (next > start + 1)			{				sel.ichFirst = start + 1				sel.ichLim = next				SetWndSel(hwnd, sel)			}		}		stop	}		//2.寻找当前节点，格式：// xxx abcd...	start = FindString( cur_line, "//" )	len = strlen(cur_line)		if (start != "X")	{		while(start<len)		{			if(cur_line[start] != "/")				break			start = start + 1		}		//下一个非空 		start = StartWS(cur_line, start)		if (next == "X")		{			stop		}		//下一个空格		next = NextWS(cur_line, start)		if (next == "X")		{			next = len		}		sel.ichFirst = start		sel.ichLim = next		SetWndSel(hwnd, sel)		stop	}}macro TestFindCache(hbufRule, word, lnMax){	row = FindCacheWholeFile(hbufRule, "key:" # word) // (hbufRule, "key:" # word # ",")	if(row>=0){		cur_line = GetBufLine(hbufRule, row )		msg ("Find:  ~ @word@  ~ @cur_line@  " )	}	else	{		msg ("no find:  ~ @word@  ~ @row@  " )	}}macro TestFindCacheAll(chkBuf, low, high){ 	var i 	var ret	i = low	lnMax = high	word = ""  	while(i < high) 	{		word = GetBufLine(chkBuf, i)				word = GetLineMacro(word)		//获取宏，不包括删除注释		//if(isHan == 1){		//	word = strmid(word,0,3)		//中文是3个字节		//}		row = FindCache(chkBuf, word, lnMax)	//查找Rule		if(row>=0){			cur_line = GetBufLine(chkBuf, row)			if(row==i){				PutBufLine(chkBuf, i, GetBufLine(chkBuf, i) # ",---")			}else{				PutBufLine(chkBuf, i, GetBufLine(chkBuf, i) # ",+++")			}			msg ("Find+:  ~ @word@  ~ @cur_line@  " )		}else{			msg ("Find-:  ~ @word@  no found " )		}        i = i + 1	}	SaveBuf(chkBuf)}